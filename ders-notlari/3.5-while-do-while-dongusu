# **Ders 13 Notları: while ve do-while Döngüleri**

Selam Dostlar! Bu derste, tekrar sayısını bilmediğimiz durumlar için kullanılan `while` döngülerini öğrendik.

### **1. `while` Döngüsü (Önce Kontrol Et)**

`while`, bir koşul `true` olduğu sürece çalışan bir döngüdür. Koşulu **döngüye girmeden önce** kontrol eder.

- **Farkı:** `for` döngüsünü 10 kere, 100 kere gibi sayısını bildiğimiz işler için kullanırız. `while` döngüsünü "kullanıcı doğru şifreyi girene kadar" gibi sayısını bilmediğimiz, koşula bağlı işler için kullanırız.
- **Dikkat (Sonsuz Döngü):** Döngü içinde koşulu güncellemeyi (bir noktada `false` yapmayı) unutursanız, programınız kilitlenir!

**Sözdizimi:**

```csharp
while (koşul)
{
    // Koşul 'true' olduğu sürece burası çalışır.
    // KOŞULU GÜNCELLEMEYİ UNUTMA!
}

// Örnek: Parola kontrolü
string parola = "";
while (parola != "123")
{
    Console.Write("Parolayı girin: ");
    parola = Console.ReadLine(); // Koşulu güncelleyen satır
}
Console.WriteLine("Giriş Başarılı!");
```

### **2. `do-while` Döngüsü (En Az 1 Kere Çalıştır)**

`do-while`, `while`'a çok benzer, ancak koşulu **döngünün sonunda** kontrol eder. Bu nedenle, koşul `false` bile olsa, döngü **en az bir kere çalışır**.

**Sözdizimi:**

```csharp
do
{
    // Bu blok en az 1 kere çalışır.
} while (koşul); // ; (noktalı virgül) unutma!

// Örnek: Menü veya onay sorusu
char cevap;
do
{
    Console.Write("Çıkmak istediğinize emin misiniz? (E/H): ");
    cevap = Convert.ToChar(Console.ReadLine());
} while (cevap != 'E' && cevap != 'H'); // E veya H girmediği sürece tekrar sor.
```

### **Özet: `while` vs `do-while`**

| Özellik | `while` | `do-while` |
| --- | --- | --- |
| **Kontrol Yeri** | **Başta** (Önce kontrol, sonra iş) | **Sonda** (Önce iş, sonra kontrol) |
| **Çalışma Garantisi** | Döngü **hiç çalışmayabilir** (koşul en başta `false` ise). | Döngü **en az 1 kez çalışır**. |
| **Kullanım Yeri** | Koşulun en başta kontrol edilmesi gereken yerler. | Menü gösterme, onay isteme gibi en az 1 kez çalışması gereken yerler. |
